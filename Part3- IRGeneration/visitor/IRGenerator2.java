//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class IRGenerator2<A> implements GJVisitor<String, A> {
   boolean debug = false;
   boolean debug2 = false;
   boolean generateIR = false;

   int labelCount = 0;
   int tempCount = 0;

   String startLabel = null;
   String trueLabel = null;
   String falseLabel = null;
   String endLabel = null;

   boolean isPrimaryExpression = false;
   boolean isMessageSend = false;
   boolean newObject = false;
   boolean arrayAllocation = false;

   String returnType = null;

   class _variable {
      String type;
      String name;

      _variable() {
         type = null;
         name = null;
      }
   }


   class _method {
      String returnType;
      String name;
      String enclosingClass;
      Vector<_variable> parameters;
      Vector<_variable> variables;

      _method() {
         returnType = null;
         name = null;
         enclosingClass = null;
         parameters = new Vector<_variable>();
         variables = new Vector<_variable>();
      }
   }


   class _class {
      String name;
      boolean isChild;
      String parentClass;
      Vector<_variable> fields;
      Vector<_method> methods;

      _class() {
         name = null;
         isChild = false;
         parentClass = null;
         fields = new Vector<_variable>();
         methods = new Vector<_method>();
      }
   }


   class _symbolTable {
      String name;
      Vector<_variable> fields;
      Vector<_method> methods;

      _symbolTable() {
         name = null;
         fields = new Vector<_variable>();
         methods = new Vector<_method>();
      }
   }


   // global hash map to store all classes
   HashMap<String, _class> classes = new HashMap<String, _class>();
   HashMap<String, _symbolTable> symbolTables = new HashMap<String, _symbolTable>();
   HashMap<String, String> tempType = new HashMap<String, String>();
   HashMap<String, String> varTemp = new HashMap<String, String>();
   HashMap<String, String> varType = new HashMap<String, String>();


   void generateSymbolTables() {
        for(String className : classes.keySet()) {
            _class currentClass = classes.get(className);
            String currentClassName = currentClass.name;

            _symbolTable currSymbolTable = new _symbolTable();
            currSymbolTable.name = currentClassName;

            for(_variable currField : currentClass.fields) {
                _variable newField = new _variable();
                newField.type = currentClassName;
                newField.name = currField.name;
                currSymbolTable.fields.add(newField);
            }

            for(_method currMethod : currentClass.methods) {
                _method newMethod = new _method();
                newMethod.name = currMethod.name;
                newMethod.enclosingClass = currentClassName;
                newMethod.returnType = currMethod.returnType;
                currSymbolTable.methods.add(newMethod);
            }

            while(currentClass.isChild) {
                currentClass = classes.get(currentClass.parentClass);

                for(_variable currField : currentClass.fields) {
                    _variable newField = new _variable();
                    newField.type = currentClassName;
                    newField.name = currField.name;
                    currSymbolTable.fields.add(newField);
                }

                for(_method currMethod : currentClass.methods) {
                    _method newMethod = new _method();
                    newMethod.name = currMethod.name;
                    newMethod.enclosingClass = currentClassName;
                    newMethod.returnType = currMethod.returnType;
                    currSymbolTable.methods.add(newMethod);
                }
            }

            symbolTables.put(currSymbolTable.name, currSymbolTable);
        }
   }


   String generateNewObject(String className) {
      _symbolTable currentSymbolTable = symbolTables.get(className);

      String objectTemp = String.valueOf(tempCount++);
      print("MOVE TEMP " + (tempCount) + " " + ((currentSymbolTable.fields.size() + 1) * 4));
      print("MOVE TEMP " + objectTemp + " HALLOCATE TEMP " + (tempCount++));

      // Add fields to object
      if(currentSymbolTable.fields.size() > 0) {
         for(int i=0; i<currentSymbolTable.fields.size(); i++) {
            String initTemp = String.valueOf(tempCount++);
            print("MOVE TEMP " + initTemp + " 0");
            print("HSTORE TEMP " + objectTemp + " " + ((i + 1) * 4) + " TEMP " + initTemp);
         }
      }

      // Add method vTable to object
      if(currentSymbolTable.methods.size() > 0) {
         String sizeTemp = String.valueOf(tempCount++);
         String methodArrayTemp = String.valueOf(tempCount++);
         print("MOVE TEMP " + sizeTemp + " " + (currentSymbolTable.methods.size() * 4));
         print("MOVE TEMP " + methodArrayTemp + " HALLOCATE TEMP " + sizeTemp);

         for(int i=0; i<currentSymbolTable.methods.size(); i++) {
            print("MOVE TEMP " + tempCount + " " + currentSymbolTable.methods.get(i).enclosingClass + "_" + currentSymbolTable.methods.get(i).name);
            print("HSTORE TEMP " + methodArrayTemp + " " + (i * 4) + " TEMP " + (tempCount++));
         }

         print("HSTORE TEMP " + objectTemp + " 0 TEMP " + methodArrayTemp);
      }

      return objectTemp;
   }


   String getNewLabel() {
      return "L" + (labelCount++);
   }


   String getNewTemp() {
        return "TEMP " + (tempCount++);
   }


   void setTempCount(int x) {
        tempCount = x;
   }


   _method getMethod(_class currentClass, String methodName) {
      for(_method currentMethod : currentClass.methods) {
         if(currentMethod.name.equals(methodName)) {
            return currentMethod;
         }
      }

      return null;
   }


   String getTemp(_method currentMethod, String variableName) {
      int count = 1;
      for(int i=0; i<currentMethod.parameters.size(); i++) {
         if(currentMethod.parameters.get(i).name.equals(variableName)) {

            if(debug2) {
               print("Found parameter " + variableName + " in method " + currentMethod.name);
               print("Returning TEMP " + count);
            }
            return String.valueOf(count + i);
         }
      }

      count += currentMethod.parameters.size();

      for(int i=0; i<currentMethod.variables.size(); i++) {
         if(currentMethod.variables.get(i).name.equals(variableName)) {
            if(debug2) {
               print("Found variable " + variableName + " in method " + currentMethod.name);
               print("Returning TEMP " + count);
            }
            return String.valueOf(count + i);
         }
      }

      return null;
   }


   void generateTemps(_method currentMethod) {
        tempType.clear();
        varTemp.clear();

        tempType.put("TEMP 0", currentMethod.enclosingClass);

        tempCount = 1;

        for(int i=0; i<currentMethod.parameters.size(); i++) {
            tempType.put("TEMP " + String.valueOf(i + tempCount), currentMethod.parameters.get(i).type);
            varTemp.put(currentMethod.parameters.get(i).name, "TEMP " + String.valueOf(i + tempCount));
        }

        tempCount += currentMethod.parameters.size();
    
        for(int i=0; i<currentMethod.variables.size(); i++) {
            tempType.put("TEMP " + String.valueOf(i + tempCount), currentMethod.variables.get(i).type);
            varTemp.put(currentMethod.variables.get(i).name, "TEMP " + String.valueOf(i + tempCount));
        }

        tempCount += currentMethod.variables.size();
   }


   String findFieldIndex(String variableType, String fieldName) {
      _symbolTable currentSymbolTable = symbolTables.get(variableType);

      for(int i=0; i<currentSymbolTable.fields.size(); i++) {
         if(currentSymbolTable.fields.get(i).name.equals(fieldName)) {
            return String.valueOf((i + 1) * 4);
         }
      }

      return null;
   }


   String getFieldTemp(String variableType, String fieldName) {
      String thisTemp = String.valueOf(tempCount++);
      print("MOVE TEMP " + thisTemp + " TEMP 0");
      String fieldIndex = findFieldIndex(variableType, fieldName);
      print("HLOAD TEMP " + tempCount + " TEMP " + thisTemp + " " + fieldIndex);

      return String.valueOf(tempCount++);
   }


   String findMethodIndexAndReturnType(String variableType, String methodName) {
      _symbolTable currentSymbolTable = symbolTables.get(variableType);

      for(int i=0; i<currentSymbolTable.methods.size(); i++) {
         if(currentSymbolTable.methods.get(i).name.equals(methodName)) {
            return (String.valueOf(i * 4) + "_" + currentSymbolTable.methods.get(i).returnType);
         }
      }

      return null;
   }


   String getType(_method currentMethod, String variableName) {
      for(int i=0; i<currentMethod.variables.size(); i++){
         if(currentMethod.variables.get(i).name.equals(variableName)) {
            return currentMethod.variables.get(i).type;
         }
      }

      for(int i=0; i<currentMethod.parameters.size(); i++){
         if(currentMethod.parameters.get(i).name.equals(variableName)) {
            return currentMethod.parameters.get(i).type;
         }
      }

      _class currentClass = classes.get(currentMethod.enclosingClass);

      for(int i=0; i<currentClass.fields.size(); i++) {
         if(currentClass.fields.get(i).name.equals(variableName)) {
            return currentClass.fields.get(i).type;
         }
      }

      while(currentClass.isChild) {
         currentClass = classes.get(currentClass.parentClass);
         for(int i=0; i<currentClass.fields.size(); i++) {
            if(currentClass.fields.get(i).name.equals(variableName)) {
               return currentClass.fields.get(i).type;
            }
         }
      }

      return null;
   }


   void printAllComponents() {
      for(String className : classes.keySet()) {
         _class currClass = classes.get(className);
         print("Class: " + currClass.name);

         for(int i = 0; i < currClass.fields.size(); i++) {
            _variable currField = currClass.fields.get(i);
            print("    Field: " + currField.name + " " + currField.type);
         }

         for(int i = 0; i < currClass.methods.size(); i++) {
            _method currMethod = currClass.methods.get(i);
            print("    Method: " + currMethod.name + " " + currMethod.returnType);

            for(_variable parameter : currMethod.parameters) {
               print("        Parameter: " + parameter.name + " " + parameter.type);
            }

            for(int j = 0; j < currMethod.variables.size(); j++) {
               _variable currVariable = currMethod.variables.get(j);
               print("        Variable: " + currVariable.name + " " + currVariable.type);
            }
         }
      }
   }


   void print(String str) {
      System.out.println(str);
   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n, A argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         String _ret=null;
         _ret = "";
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            _ret += "$";
            _ret += e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public String visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public String visit(NodeSequence n, A argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, A argu) { return n.toString(); }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public String visit(Goal n, A argu) {
        String _ret=null;
        
        if(debug) print("Starting first pass");

        generateIR = false;

        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);

        generateSymbolTables();

        if(debug) print("First pass completed successfully");

        if(debug) {
            print("Summary: Printing all components");
            printAllComponents();
        }

        generateIR = true;

        if(debug) print("Starting second pass");
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, null);

        if(debug) print("Second pass completed successfully");

        return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public String visit(MainClass n, A argu) {
        String _ret=null;

        n.f0.accept(this, null);
        String className = n.f1.accept(this, argu);

        if(!generateIR) {
            _class mainClass = new _class();
            
            mainClass.name = className;

            _method mainMethod = new _method();
            mainMethod.returnType = "void";
            mainMethod.name = "main";
            mainMethod.enclosingClass = mainClass.name;

            _variable mainParameter = new _variable();
            mainParameter.type = "String[]";

            mainParameter.name = n.f11.accept(this, argu);

            mainMethod.parameters.add(mainParameter);
            mainClass.methods.add(mainMethod);
            classes.put(className, mainClass);

            return _ret;
        }

        print("MAIN");

        setTempCount(2);
        n.f14.accept(this, argu);

        print("END");
        return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n, A argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n, A argu) {
        String _ret=null;

        String className = n.f1.accept(this, argu);

        if(!generateIR) {
            _class newClass = new _class();
            newClass.name = className;
            
            n.f3.accept(this, (A) newClass.fields);
            n.f4.accept(this, (A) newClass);

            classes.put(newClass.name, newClass);
        }
        else {
            n.f4.accept(this, (A) classes.get(className));
        }

        return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n, A argu) {
        String _ret=null;

        String className = n.f1.accept(this, argu);

        if(!generateIR) {
            _class newClass = new _class();
            newClass.name = className;

            newClass.isChild = true;
            newClass.parentClass = n.f3.accept(this, argu);

            n.f5.accept(this, (A) newClass.fields);
            n.f6.accept(this, (A) newClass);

            classes.put(newClass.name, newClass);
        }
        else {
            n.f6.accept(this, (A) classes.get(className));
        }

        return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n, A argu) {
        String _ret=null;

        Vector<_variable> variableList = (Vector<_variable>) argu;
        _variable newVariable = new _variable();

        newVariable.type = n.f0.accept(this, argu);
        newVariable.name = n.f1.accept(this, argu);
        variableList.add(newVariable);

        return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n, A argu) {
        String _ret=null;

        _class currentClass = (_class) argu;
        String currentClassName = currentClass.name;

        String returnType = n.f1.accept(this, argu);
        String methodName = n.f2.accept(this, argu);

        if(!generateIR) {
            _method newMethod = new _method();

            newMethod.returnType = returnType;
            newMethod.name = methodName;
            newMethod.enclosingClass = currentClass.name;

            n.f4.accept(this, (A) newMethod);

            n.f7.accept(this, (A) newMethod.variables);

            currentClass.methods.add(newMethod);
        }
        else {
            _method currentMethod = getMethod(currentClass, methodName);

            print(currentClassName + "_" + methodName + " [" + (currentMethod.parameters.size() + 1) + "]");
            print("BEGIN");

            generateTemps(currentMethod);

            n.f8.accept(this, (A) currentMethod);

            String returnTemp = n.f10.accept(this, (A) currentMethod);

            tempType.put(returnTemp, returnType);

            print("RETURN TEMP " + returnTemp);

            print("END");
        }

        return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n, A argu) {
        String _ret=null;

        _method currentMethod = (_method) argu;
        _variable newParameter = new _variable();

        n.f0.accept(this, (A) newParameter);
        currentMethod.parameters.add(newParameter);

        n.f1.accept(this, argu);

        return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n, A argu) {
        String _ret=null;

        _variable currentParameter = (_variable) argu;

        currentParameter.type = n.f0.accept(this, argu);
        currentParameter.name = n.f1.accept(this, argu);

        return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n, A argu) {
        String _ret=null;

        _method currentMethod = (_method) argu;
        _variable newParameter = new _variable();

        n.f1.accept(this, (A) newParameter);
        currentMethod.parameters.add(newParameter);

        return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public String visit(Type n, A argu) {
        String _ret=null;

        _ret = n.f0.accept(this, argu);

        return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public String visit(ArrayType n, A argu) {
        String _ret=null;

        _ret = "int[]";

        return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n, A argu) {
        String _ret=null;

        _ret = "boolean";

        return _ret;
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n, A argu) {
        String _ret=null;

        _ret = "int";

        return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public String visit(Statement n, A argu) {
        String _ret=null;

        n.f0.accept(this, argu);

        return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n, A argu) {
        String _ret=null;

        n.f1.accept(this, argu);

        return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n, A argu) {
        String _ret=null;

        String variableName = n.f0.accept(this, argu);
        String variableTemp = null;
        boolean isField = false;
        variableTemp = getTemp((_method) argu, variableName);
        if(variableTemp == null) isField = true;


        String valueTemp = n.f2.accept(this, argu);
        if(valueTemp.equals("this")) valueTemp = "0";

        if(!isField) {
            print("MOVE TEMP " + variableTemp + " TEMP " + valueTemp);
        }
        else {
            String fieldIndex = findFieldIndex(((_method) argu).enclosingClass, variableName);
            print("HSTORE TEMP 0 " + fieldIndex + " TEMP " + valueTemp);
            isField = false;
        }

        return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public String visit(ArrayAssignmentStatement n, A argu) {
      String _ret=null;

      String arrayName = n.f0.accept(this, argu);
      String arrayTemp = null;
      arrayTemp = getTemp((_method) argu, arrayName);
      if(arrayTemp == null) arrayTemp = getFieldTemp(((_method) argu).enclosingClass, arrayName);

      String offsetTemp = n.f2.accept(this, argu);

      String valueTemp = n.f5.accept(this, argu);

      print("MOVE TEMP " + (tempCount) + " PLUS TEMP " + offsetTemp + " 1");
      offsetTemp = String.valueOf(tempCount++);
      print("MOVE TEMP " + (tempCount) + " TIMES TEMP " + offsetTemp + " 4");
      offsetTemp = String.valueOf(tempCount++);
      String effectiveArrayAddressTemp = String.valueOf(tempCount++);
      print("MOVE TEMP " + effectiveArrayAddressTemp + " PLUS TEMP " + arrayTemp + " TEMP " + offsetTemp);
      print("HSTORE TEMP " + effectiveArrayAddressTemp + " 0 TEMP " + valueTemp);

      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public String visit(IfStatement n, A argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(IfthenStatement n, A argu) {
      String _ret=null;

      String trueLabel = getNewLabel();
      String falseLabel = getNewLabel();

      String boolTemp = n.f2.accept(this, argu);

      print("CJUMP TEMP " + boolTemp + " " + falseLabel);
      print(trueLabel);

      n.f4.accept(this, argu);

      print(falseLabel);
      print("NOOP");

      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfthenElseStatement n, A argu) {
      String _ret=null;

      String trueLabel = getNewLabel();
      String falseLabel = getNewLabel();
      String endLabel = getNewLabel();

      String boolTemp = n.f2.accept(this, argu);

      print("CJUMP TEMP " + boolTemp + " " + falseLabel);
      print(trueLabel);

      n.f4.accept(this, argu);

      print("JUMP " + endLabel);

      print(falseLabel);

      n.f6.accept(this, argu);

      print(endLabel);
      print("NOOP");

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n, A argu) {
      String _ret=null;

      String startLabel = getNewLabel();
      String trueLabel = getNewLabel();
      String falseLabel = getNewLabel();

      print(startLabel);

      String boolTemp = n.f2.accept(this, argu);

      print("CJUMP TEMP " + boolTemp + " " + falseLabel);
      print(trueLabel);

      n.f4.accept(this, argu);

      print("JUMP " + startLabel);

      print(falseLabel);
      print("NOOP");

      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public String visit(DoStatement n, A argu) {
      String _ret=null;

      String startLabel = getNewLabel();

      print(startLabel);

      n.f1.accept(this, argu);

      falseLabel = getNewLabel();

      String boolTemp = n.f4.accept(this, argu);

      print("CJUMP TEMP " + boolTemp + " " + falseLabel);
      print("JUMP " + startLabel);

      print(falseLabel);
      print("NOOP");

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n, A argu) {
      String _ret=null;

      String tempValue = n.f2.accept(this, argu);

      print("PRINT TEMP " + tempValue);

      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public String visit(Expression n, A argu) {
      String _ret=null;

      if(!generateIR) return _ret;

      _ret = n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public String visit(AndExpression n, A argu) {
      String _ret=null;

      print("MOVE TEMP " + tempCount + " 0");
      _ret = String.valueOf(tempCount++);

      String leftTemp = n.f0.accept(this, argu);
      String endLabel = getNewLabel();
      print("CJUMP TEMP " + leftTemp + " " + endLabel);

      String rightTemp = n.f2.accept(this, argu);
      print("CJUMP TEMP " + rightTemp + " " + endLabel);

      print("MOVE TEMP " + (Integer.parseInt(_ret)) + " 1");

      print(endLabel);

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public String visit(OrExpression n, A argu) {
      String _ret=null;

      print("MOVE TEMP " + tempCount + " 1");
      _ret = String.valueOf(tempCount++);

      String endLabel = getNewLabel();
      String tempLabel1 = getNewLabel();
      String tempLabel2 = getNewLabel();

      String leftTemp = n.f0.accept(this, argu);

      print("CJUMP TEMP " + leftTemp + " " + tempLabel1);
      print("JUMP " + endLabel);

      print(tempLabel1);
      String rightTemp = n.f2.accept(this, argu);

      print("CJUMP TEMP " + rightTemp + " " + tempLabel2);
      print("JUMP " + endLabel);

      print(tempLabel2);
      print("MOVE TEMP " + (Integer.parseInt(_ret)) + " 0");

      print(endLabel);

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public String visit(CompareExpression n, A argu) {
      String _ret=null;

      String leftTemp = n.f0.accept(this, argu);
      String rightTemp = n.f2.accept(this, argu);

      print("MOVE TEMP " + tempCount + " LE TEMP " + leftTemp + " TEMP " + rightTemp);

      _ret = String.valueOf(tempCount++);

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public String visit(neqExpression n, A argu) {
      String _ret=null;

      String leftTemp = n.f0.accept(this, argu);
      String rightTemp = n.f2.accept(this, argu);

      print("MOVE TEMP " + tempCount + " NE TEMP " + leftTemp + " TEMP " + rightTemp);

      _ret = String.valueOf(tempCount++);

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public String visit(AddExpression n, A argu) {
      String _ret=null;

      String leftTemp = n.f0.accept(this, argu);
      String rightTemp = n.f2.accept(this, argu);

      print("MOVE TEMP " + tempCount + " PLUS TEMP " + leftTemp + " TEMP " + rightTemp);

      _ret = String.valueOf(tempCount++);

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public String visit(MinusExpression n, A argu) {
      String _ret=null;

      String leftTemp = n.f0.accept(this, argu);
      String rightTemp = n.f2.accept(this, argu);

      print("MOVE TEMP " + tempCount + " MINUS TEMP " + leftTemp + " TEMP " + rightTemp);

      _ret = String.valueOf(tempCount++);

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public String visit(TimesExpression n, A argu) {
      String _ret=null;

      String leftTemp = n.f0.accept(this, argu);
      String rightTemp = n.f2.accept(this, argu);

      print("MOVE TEMP " + tempCount + " TIMES TEMP " + leftTemp + " TEMP " + rightTemp);

      _ret = String.valueOf(tempCount++);

      return _ret;

   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public String visit(DivExpression n, A argu) {
      String _ret=null;

      String leftTemp = n.f0.accept(this, argu);
      String rightTemp = n.f2.accept(this, argu);

      print("MOVE TEMP " + tempCount + " DIV TEMP " + leftTemp + " TEMP " + rightTemp);

      _ret = String.valueOf(tempCount++);

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public String visit(ArrayLookup n, A argu) {
      String _ret=null;

      String arrayTemp = n.f0.accept(this, argu);
      String offset = n.f2.accept(this, argu);

      print("MOVE TEMP " + (tempCount) + " PLUS TEMP " + offset + " 1");
      offset = String.valueOf(tempCount++);
      print("MOVE TEMP " + (tempCount) + " TIMES TEMP " + offset + " 4");
      offset = String.valueOf(tempCount++);
      print("MOVE TEMP " + tempCount + " PLUS TEMP " + arrayTemp + " TEMP " + offset);
      String effectiveArrrayTemp = String.valueOf(tempCount++);
      print("HLOAD TEMP " + tempCount + " TEMP " + effectiveArrrayTemp + " 0");

      _ret = String.valueOf(tempCount++);

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public String visit(ArrayLength n, A argu) {
      String _ret=null;
      
      String arrayTemp = n.f0.accept(this, argu);

      print("HLOAD TEMP " + tempCount + " TEMP " + arrayTemp + " 0");

      _ret = String.valueOf(tempCount++);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n, A argu) {
      String _ret=null;
      isMessageSend = true;
      String variableName = n.f0.accept(this, argu);
      isMessageSend = false;

      String variableType = null;
      String variableTemp = null;

      if(variableName.matches("[0-9]+")){
         variableType = returnType;
         variableTemp = variableName;
      }
      else if(variableName == "this") {
         variableType = ((_method) argu).enclosingClass;
         print("MOVE TEMP " + tempCount + " TEMP 0");
         variableTemp = String.valueOf(tempCount++);
      }
      else if(newObject) {
         newObject = false;
         variableType = variableName.split("_")[0];
         variableTemp = variableName.split("_")[1];
      }
      else {
         variableType = getType((_method) argu, variableName);
         variableTemp = getTemp((_method) argu, variableName);
      }

      if(variableTemp == null) {
         return _ret;
      }

      String methodName = n.f2.accept(this, argu);

      String expressionList = n.f4.accept(this, argu);
      Vector<String> arguments = new Vector<String>();
      if(expressionList != null) {
         String[] expressionListArray = expressionList.split("\\$");
         for(int i = 0; i < expressionListArray.length; i++) {
            arguments.add(expressionListArray[i]);
         }
      }

      String vTable = String.valueOf(tempCount++);
      print("HLOAD TEMP " + vTable + " TEMP " + variableTemp + " 0");
      String methodIndex_ReturnType = findMethodIndexAndReturnType(variableType, methodName);
      String methodIndex = methodIndex_ReturnType.split("_")[0];
      returnType = methodIndex_ReturnType.split("_")[1];
      String methodTemp = String.valueOf(tempCount++);
      print("HLOAD TEMP " + methodTemp + " TEMP " + vTable + " " + methodIndex);

      String returnTemp = String.valueOf(tempCount++);

      System.out.print("MOVE TEMP " + returnTemp + " CALL TEMP " + methodTemp + " ( ");
      System.out.print("TEMP " + variableTemp + " ");
      for(int i = 0; i < arguments.size(); i++) {
         System.out.print("TEMP " + arguments.get(i) + " ");
      }
      print(")");

      _ret = returnTemp;
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public String visit(ExpressionList n, A argu) {
      String _ret=null;
      _ret = n.f0.accept(this, argu);
      String ret = n.f1.accept(this, argu);
      if(ret != null) _ret += ret;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public String visit(ExpressionRest n, A argu) {
      String _ret=null;
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public String visit(PrimaryExpression n, A argu) {
      String _ret=null;

      isPrimaryExpression = true;
      _ret = n.f0.accept(this, argu);
      isPrimaryExpression = false;

      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, A argu) {
      String _ret=null;

      String value = n.f0.accept(this, argu);

      print("MOVE TEMP " + tempCount + " " + value);

      _ret = String.valueOf(tempCount++);

      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n, A argu) {
      String _ret=null;

      print("MOVE TEMP " + tempCount + " 1");

      _ret = String.valueOf(tempCount++);

      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n, A argu) {
      String _ret=null;

      print("MOVE TEMP " + tempCount + " 0");

      _ret = String.valueOf(tempCount++);

      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n, A argu) {
      String _ret=null;
      String name = n.f0.accept(this, argu);
      _ret = name;

      if(isMessageSend) return name;
      else if(isPrimaryExpression) {
         _ret = getTemp((_method) argu, _ret);
         if(_ret == null) {
            _ret = getFieldTemp(((_method) argu).enclosingClass, name);
         }
      }

      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n, A argu) {
      String _ret=null;

      _ret = "this";

      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public String visit(ArrayAllocationExpression n, A argu) {
      String _ret=null;

      String sizeTemp = n.f3.accept(this, argu);

      String actualSizeTemp = sizeTemp;

      print("MOVE TEMP " + tempCount + " PLUS TEMP " + sizeTemp + " 1");
      sizeTemp = String.valueOf(tempCount++);
      print("MOVE TEMP " + tempCount + " TIMES TEMP " + sizeTemp + " 4");
      sizeTemp = String.valueOf(tempCount++);

      String arrayTemp = String.valueOf(tempCount++);
      print("MOVE TEMP " + arrayTemp + " HALLOCATE TEMP " + sizeTemp);
      print("HSTORE TEMP " + arrayTemp + " 0 TEMP " + actualSizeTemp);

      String counterTemp = String.valueOf(tempCount++);
      String startLabel =  getNewLabel();
      String trueLabel = getNewLabel();
      String falseLabel = getNewLabel();

      print("MOVE TEMP " + counterTemp + " 0");
      print(startLabel);
      print("MOVE TEMP " + tempCount + " NE TEMP " + counterTemp + " TEMP " + actualSizeTemp);
      print("CJUMP TEMP " + tempCount + " " + falseLabel);
      print(trueLabel);
      tempCount++;
      String effectiveIndexTemp = String.valueOf(tempCount++);
      print("MOVE TEMP " + effectiveIndexTemp + " PLUS TEMP " + counterTemp + " 1");
      print("MOVE TEMP " + effectiveIndexTemp + " TIMES TEMP " + effectiveIndexTemp + " 4");
      print("MOVE TEMP " + effectiveIndexTemp + " PLUS TEMP " + effectiveIndexTemp + " TEMP " + arrayTemp);
      String valueTemp = String.valueOf(tempCount++);
      print("MOVE TEMP " + valueTemp + " 0");
      print("HSTORE TEMP " + effectiveIndexTemp + " 0 TEMP " + valueTemp);
      print("MOVE TEMP " + counterTemp + " PLUS TEMP " + counterTemp + " 1");
      print("JUMP " + startLabel);
      print(falseLabel);
      print("NOOP");

      _ret = arrayTemp;
      arrayAllocation = true;
      
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n, A argu) {
      String _ret=null;

      isPrimaryExpression = false;

      String className = n.f1.accept(this, argu);

      _ret = generateNewObject(className);

      if(isMessageSend) {
         _ret = className + "_" + _ret; 
         newObject = true;
      }

      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public String visit(NotExpression n, A argu) {
      String _ret=null;

      String valueTemp = n.f1.accept(this, argu);

      print("MOVE TEMP " + tempCount + " MINUS 1 TEMP " + valueTemp);

      _ret = String.valueOf(tempCount++);

      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public String visit(BracketExpression n, A argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public String visit(IdentifierList n, A argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public String visit(IdentifierRest n, A argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
