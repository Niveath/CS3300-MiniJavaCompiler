//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<A> implements GJVisitor<String, A> {
   Boolean isExp = false;

   void functionHeading(String functionName) {
      System.out.println("\t.text");
      System.out.println("\t.globl " + functionName);
      System.out.println(functionName + ":");
   }

   void addControlLinks(int numStackSlots) {
      System.out.println("\t\tsw $fp, 0($sp)");
      System.out.println("\t\tsw $ra, -4($sp)");
      System.out.println("\t\tmove " + "$fp, $sp");
      System.out.println("\t\tsubu " + "$sp, $sp, " + ((numStackSlots + 2) * 4));
   }

   void removeControlLinks(int numStackSlots) {
      System.out.println("\t\tlw $ra, -4($fp)");
      System.out.println("\t\tlw $fp, 0($fp)");
      System.out.println("\t\taddu " + "$sp, $sp, " + ((numStackSlots + 2) * 4));
      System.out.println("\t\tjr $ra");
   }

   void halloc() {
      functionHeading("_halloc");
      System.out.println("\t\tli $v0, 9");
      System.out.println("\t\tsyscall");
      System.out.println("\t\tjr $ra");
      System.out.println();
   }

   void print() {
      functionHeading("_print");
      System.out.println("\t\tli $v0, 1");
      System.out.println("\t\tsyscall");
      System.out.println("\t\tla $a0, newl");
      System.out.println("\t\tli $v0, 4");
      System.out.println("\t\tsyscall");
      System.out.println("\t\tjr $ra");
      System.out.println();
   }

   void error() {
      functionHeading("_error");
      System.out.println("\t\tli $v0, 4");
      System.out.println("\t\tla $a0, str_er");
      System.out.println("\t\tsyscall");
      System.out.println("\t\tli $v0, 10");
      System.out.println("\t\tsyscall");
      System.out.println();
   }

   void data() {
      System.out.println("\t.data");
      System.out.println("\t.align 0");
      System.out.println("newl: .asciiz \"\\n\"");
      System.out.println();
      System.out.println("\t.data");
      System.out.println("\t.align 0");
      System.out.println("str_er: .asciiz \"ERROR: abnormal termination\\n\"");
   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n, A argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         String _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public String visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public String visit(NodeSequence n, A argu) {
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, A argu) { return n.toString(); }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public String visit(Goal n, A argu) {
      String _ret=null;
      String numArgs = n.f2.accept(this, argu);
      String numStackSlots = n.f5.accept(this, argu);
      String maxCallArgs = n.f8.accept(this, argu);

      functionHeading("main");
      addControlLinks(Integer.parseInt(numStackSlots));

      n.f10.accept(this, argu);

      removeControlLinks(Integer.parseInt(numStackSlots));

      System.out.println();

      n.f13.accept(this, argu);

      halloc();
      print();
      error();
      data();

      n.f14.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public String visit(StmtList n, A argu) {
      String _ret=null;
      for ( Enumeration<Node> e = n.f0.elements(); e.hasMoreElements(); ) {
         NodeSequence n1 = (NodeSequence) e.nextElement();
         NodeOptional labelNode = (NodeOptional) n1.elementAt(0);
         Stmt stmtNode = (Stmt) n1.elementAt(1);

         if(labelNode.present()) { 
              System.out.println(labelNode.accept(this, argu) + ":");
         }
         stmtNode.accept(this, argu);
     }
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public String visit(Procedure n, A argu) {
      String _ret=null;
      String functionName = n.f0.accept(this, argu);
      String numArgs = n.f2.accept(this, argu);
      String numStackSlots = n.f5.accept(this, argu);
      String maxCallArgs = n.f8.accept(this, argu);

      functionHeading(functionName);
      addControlLinks(Integer.parseInt(numStackSlots));

      n.f10.accept(this, argu);

      removeControlLinks(Integer.parseInt(numStackSlots));

      System.out.println();
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public String visit(Stmt n, A argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public String visit(NoOpStmt n, A argu) {
      String _ret=null;

      System.out.println("\t\tnop");

      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public String visit(ErrorStmt n, A argu) {
      String _ret=null;

      System.out.println("\t\tjal _error");

      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public String visit(CJumpStmt n, A argu) {
      String _ret=null;

      String register = n.f1.accept(this, argu);
      String label = n.f2.accept(this, argu);

      System.out.println("\t\tbeqz $" + register + ", " + label);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public String visit(JumpStmt n, A argu) {
      String _ret=null;

      String label = n.f1.accept(this, argu);

      System.out.println("\t\tb " + label);

      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public String visit(HStoreStmt n, A argu) {
      String _ret=null;

      String baseRegister = n.f1.accept(this, argu);
      String offset = n.f2.accept(this, argu);
      String valueRegister = n.f3.accept(this, argu);

      System.out.println("\t\tsw $" + valueRegister + ", " + offset + "($" + baseRegister + ")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public String visit(HLoadStmt n, A argu) {
      String _ret=null;

      String storeRegister = n.f1.accept(this, argu);
      String baseRegister = n.f2.accept(this, argu);
      String offset = n.f3.accept(this, argu);

      System.out.println("\t\tlw $" + storeRegister + ", " + offset + "($" + baseRegister + ")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public String visit(MoveStmt n, A argu) {
      String _ret=null;

      n.f2.accept(this, (A) (n.f1.accept(this, argu)) );

      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public String visit(PrintStmt n, A argu) {
      String _ret=null;
      if(n.f1.f0.which == 0) {
         String register = n.f1.accept(this, argu);
         System.out.println("\t\tmove $a0, $" + register);
      }
      else if(n.f1.f0.which == 1) {
         String integerLiteral = n.f1.accept(this, argu);
         System.out.println("\t\tli $a0, " + integerLiteral);
      }
      else if(n.f1.f0.which == 2) {
         String label = n.f1.accept(this, argu);
         System.out.println("\t\tla $a0, " + label);
      }

      System.out.println("\t\tjal _print");

      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public String visit(ALoadStmt n, A argu) {
      String _ret=null;

      String register = n.f1.accept(this, argu);
      int stackLocation = ((Integer.parseInt(n.f2.accept(this, argu)) + 2) * 4);

      System.out.println("\t\tlw $" + register + ", -" + stackLocation + "($fp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public String visit(AStoreStmt n, A argu) {
      String _ret=null;

      int stackLocation = ((Integer.parseInt(n.f1.accept(this, argu)) + 2) * 4);
      String register = n.f2.accept(this, argu);

      System.out.println("\t\tsw $" + register + ", -" + stackLocation + "($fp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public String visit(PassArgStmt n, A argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      int stackLocation = ((Integer.parseInt(n.f1.accept(this, argu)) + 1) * 4);
      String register = n.f2.accept(this, argu);

      System.out.println("\t\tsw $" + register + ", -" + stackLocation + "($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public String visit(CallStmt n, A argu) {
      String _ret=null;
      
      if(n.f1.f0.which == 0) {
         String register = n.f1.accept(this, argu);
         System.out.println("\t\tjalr $" + register);
      }
      else if(n.f1.f0.which == 2) {
         String label = n.f1.accept(this, argu);
         System.out.println("\t\tjal " + label);
      }
      else {
         System.out.println("ERROR: CallStmt");
      }

      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public String visit(Exp n, A argu) {
      String _ret=null;

      if(n.f0.which == 2)
         isExp = true;

      _ret = n.f0.accept(this, argu);

      isExp = false;

      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public String visit(HAllocate n, A argu) {
      String _ret=null;

      String storeRegister = (String) argu;

      if(n.f1.f0.which == 0) {
         String register = n.f1.accept(this, argu);
         System.out.println("\t\tmove $a0, $" + register);
      }
      else if(n.f1.f0.which == 1) {
         String integerLiteral = n.f1.accept(this, argu);
         System.out.println("\t\tli $a0, " + integerLiteral);
      }
      else if(n.f1.f0.which == 2) {
         String label = n.f1.accept(this, argu);
         System.out.println("\t\tla $a0, " + label);
      }

      System.out.println("\t\tjal _halloc");
      System.out.println("\t\tmove $" + storeRegister + ", $v0");

      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public String visit(BinOp n, A argu) {
      String _ret=null;

      String storeRegister = (String) argu;

      String instruction = n.f0.accept(this, argu);
      String register1 = n.f1.accept(this, argu);

      String value = n.f2.accept(this, argu);

      if(n.f2.f0.which == 0) value = "$" + value;

      System.out.println("\t\t" + instruction + " $" + storeRegister + ", $" + register1 + ", " + value);

      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public String visit(Operator n, A argu) {
      String _ret=null;
      
      if(n.f0.which == 0) _ret = "sle";
      else if(n.f0.which == 1) _ret = "sne";
      else if(n.f0.which == 2) _ret = "addu";
      else if(n.f0.which == 3) _ret = "subu";
      else if(n.f0.which == 4) _ret = "mul";
      else if(n.f0.which == 5) _ret = "div";

      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public String visit(SpilledArg n, A argu) {
      String _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public String visit(SimpleExp n, A argu) {
      String _ret = n.f0.accept(this, argu);
      if(isExp) {
         String storeRegister = (String) argu;

         if(n.f0.which == 0) System.out.println("\t\tmove $" + storeRegister + ", $" + _ret);
         else if(n.f0.which == 1) System.out.println("\t\tli $" + storeRegister + ", " + _ret);
         else if(n.f0.which == 2) System.out.println("\t\tla $" + storeRegister + ", " + _ret);

         _ret = null;
      }

      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public String visit(Reg n, A argu) {
      String _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, A argu) {
      String _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Label n, A argu) {
      String _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public String visit(SpillInfo n, A argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public String visit(SpillStatus n, A argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
